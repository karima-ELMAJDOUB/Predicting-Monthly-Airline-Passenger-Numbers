# -*- coding: utf-8 -*-
"""RNN_prjtTTT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_UMDdFWPlGhF3e6GQFVOVNr6f5lI_FRf
"""

#Importer les packages
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.layers import Dense,SimpleRNN,Dropout,LSTM
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

# Ouvrir la base de donnees
df=pd.read_csv('/content/AirPassengers.csv')
df.head()

data=df[['#Passengers']].values
data

#Préparation de la base de données
#normaliser les donnees
sc=MinMaxScaler(feature_range=(0,1))
data_scaled=sc.fit_transform(data)

data_scaled

X_data=[]
y_data=[]
look_back=1
for i in range (len(data_scaled)-1):
  X_data.append(data_scaled[i:(i+look_back),0])
  y_data.append(data_scaled[i+look_back,0])
X_data,y_data=np.array(X_data),np.array(y_data)
print(X_data)
print(y_data)

#Reshaping
X_data=np.reshape(X_data,(X_data.shape[0],X_data.shape[1],1))

X_data.shape

#Split data into Test and Train
train_size=int(len(X_data)*0.8)
test_size=len(X_data)-train_size
X_train=X_data[0:train_size,:]
X_test=X_data[train_size:len(X_data),:]
y_train=y_data[0:train_size]
y_test=y_data[train_size:len(y_data)]

X_train.shape

y_train.shape

X_test.shape

y_test.shape

#Construction de RNN
modelRNN = Sequential()
modelRNN.add(SimpleRNN(40, return_sequences=True, input_shape=(X_train.shape[1],1)))
modelRNN.add(Dropout(0.15))
modelRNN.add(SimpleRNN(50, return_sequences=True))
modelRNN.add(Dropout(0.1))
modelRNN.add(SimpleRNN(10, activation="relu"))
modelRNN.add(Dropout(0.2))
modelRNN.add(Dense(1))
print(modelRNN.summary())

modelRNN.compile(optimizer='adam',loss='mean_squared_error')

#fiiting model
modelRNN.fit(X_train,y_train,epochs=30)



#faire des précisions
y_pred=modelRNN.predict(X_test)

#Visualiser les resultat
plt.plot(y_test,color='green',label='nombre de passagers reel')
plt.plot(y_pred,color='red',label='nombre de passagers prévus')
plt.title('les passagers prévus vs réels ')
plt.xlabel('Temps')
plt.ylabel('Passagers')
plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt
rmse=sqrt(mean_squared_error(y_test,y_pred))
print(rmse)